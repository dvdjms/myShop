from django.test import TestCase
from rest_framework.test import APITestCase, APIClient
from .models.models import Image, CustomUser
from .views.image_views import ImageView
from django.core.files.uploadedfile import SimpleUploadedFile


class ImageViewTestCase(TestCase):
    def test_create_image_object(self):
        view = ImageView()
        # Create mock image object
        mock_image_data = b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00\xff\xdb\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0c\x14\r\x0c\x0b\x0b\x0c\x19\x12\x13\x0f\x14\x1d\x1a\x1f\x1e\x1d\x1a\x1c\x1c $.\' ",#\x1c\x1c(7),01444\x1f\'9=82<.342\x01\x07\x07\x07\x0b\n\x0b\x16\r\r\x162\x1d$F\x1f\x1f\'3-7(-.+\x0f\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\xff\xc0\x00\x11\x08\x01\x90\x01\x90\x03\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1c\x00\x00\x01\x05\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\xff\xc4\x00A\x10\x00\x02\x01\x03\x03\x02\x04\x03\x05\x05\x04\x04\x00\x00\x01}\x01\x02\x03\x00\x04\x11\x05\x12!1A\x06\x13Qa\x07"q\x142\x81\x08\x14B\x91\xa1\xb1\xc1\t#3br\x82\n\x15\x16$4\xd1\xf0%\n\x17\x18\x19\x1a&\'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xc4\x00\x1a\x01\x00\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\xff\xc4\x00(\x11\x00\x02\x01\x02\x04\x04\x03\x04\x07\x05\x04\x04\x00\x01\x02w\x00\x01\x02\x03\x11\x04\x05!1\x06\x12AQ\x07aq\x13"2\x81\x08\x14B\x91\xa1\xb1\xc1\t#3R\xf0\x15br\xd1\n\x16$4\xe1%\xf1\x17\x18\x19\x1a&\'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00\xff\xd9'
        image_file = SimpleUploadedFile("test_image.jpeg", mock_image_data, content_type="image/jpeg")
        image_url = image_file
        description = 'mock_description'
        product_id = 1
        user = CustomUser.objects.create(firebase_uid='mock_user')
        # Call function with mock data
        view.create_image_object(image_url, description, product_id, user)
        # Get data created for mock test
        saved_image = Image.objects.get(description='mock_description', product_id=1, firebase_uid='mock_user')
        # Assertions
        self.assertTrue(Image.objects.exists())
        self.assertEqual(saved_image.description, 'mock_description')
        self.assertEqual(saved_image.product_id, 1)
        self.assertEqual(saved_image.firebase_uid.firebase_uid, user.firebase_uid)


    def test_create_image_object_invalid_data(self):
        pass



    def test_get_queryset(self):
        """Test that images are returned"""
        response = self.client.get('/api/images/')
        self.assertEqual(response.status_code, 200)





